files:
  "/var/app/current/.platform/hooks/predeploy/11_replica_db_migration.sh":
    mode: "000755"
    owner: ec2-user
    group: ec2-user
    content: |
      set -xe

      EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir)
      EB_APP_STAGING_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_dir)
      EB_APP_USER=$(/opt/elasticbeanstalk/bin/get-config container -k app_user)
      EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir)

      # Load env variables
      . $EB_SUPPORT_DIR/envvars

      . $EB_SCRIPT_DIR/use-app-ruby.sh

      cd $EB_APP_STAGING_DIR

      ruby /tmp/replica_migration.rb replica $RAILS_SKIP_MIGRATIONS $REPLICA_SKIP_MIGRATIONS

  "/tmp/replica_migration.rb":
    mode: "000755"
    owner: ec2-user
    group: ec2-user
    content: |
      #!/usr/bin/env ruby

      def run_migrations(target_env, rails_skip_migrations, replica_skip_migrations)

        return if target_env.to_s.empty? || rails_skip_migrations == 'true' || replica_skip_migrations == 'true'

        status_output = `RAILS_ENV=#{target_env} bundle exec rake db:migrate:status`
        puts "output: #{status_output}"
        lines = status_output.split("\n")

        if lines && lines.any?
          # Skip some of the header output of the db:migrate:status command
          lines[5..-1].each do |line|
            parts = line.split("\s")
            next if (parts[0] != "down" || parts[2] =~ /NO FILE/)
            version_id = parts[1]

            # Execute the migration
            puts "Running migration version: #{version_id}"
            cmd = "RAILS_ENV=#{target_env} bundle exec rake db:migrate:up VERSION=#{version_id}"
            output = `#{cmd}`

            if $?.exitstatus > 0
              puts "Error encountered while running: #{cmd}"
              puts "Output: #{output}"
            end
          end
        end
      end

      run_migrations(ARGV[0], ARGV[1], ARGV[2])
